#+TITLE:     EBus
#+AUTHOR:    Guido Schreuder
#+EMAIL:     guido.schreuder@ruimtepuin.be

* Manage the Valliant heater

** Goals
Create system to control the heater

Conceived features:
- room controller:
  - display to represent status
  - sensor for actual temperature
  - controls to set required temperature
- communicate date and temperature to heater unit
- control remotely using a telegram bot, that way we do not need to open any ports to the outside
- display graphs of some relevant values like:
  - temperature requested
  - temperatures measured by heater, i.e.:
    - requested room temp
    - current room temp
    - outgoing temp
    - return temp
    - pump on/off

** Topology
- room controller (ESP32 + display + temp-sensor)
- communicates to "master" ESP32 on heater unit over ESP-NOW
- master forwards to MQTT for monitoring/graphing


** Challenges
- EBUS communication protocol
- Valliant's EBUS commands are proprietary

* tasks
** DONE create hardware interface for EBUS
    CLOSED: [2021-01-17 Sun 01:48]
** DONE get hardware interface to work with Ebusd and experiment a bit
    CLOSED: [2021-01-17 Sun 01:48]
** DONE build bus power supply so testing can be done in stand-alone mode
    CLOSED: [2021-01-17 Sun 01:50]
** TODO determine preferred topology to use
consider ESP-NOW so "sensor" modules can profit from reduced "ON" time.

This needs a "master" though to forward to MQTT if required.

Good read and entry point is here: https://hackaday.io/project/174898-esp-now-weather-station
** DONE experiment with programming new ESP32 boards
    CLOSED: [2021-01-18 Mon 03:19]
that was easy as pie :)
** DONE get ESP32 to listen in on EBUS messages and forward them ad-verbum to serial port for monitoring/debugging
    CLOSED: [2021-01-24 Sun 05:14]
** TODO implement queues for actions "to be done" and "messages completed"
status:

implemented a pretty simple queue

later i found out about the provided facilities of FreeRTOS (live and learn...)

the simple mock queue is however still very usefull for unit-testing in native mode

actual implementation will use FreeRTOS queues provided by ESP-IDF/FreeRTOS
** DONE learn how to use FreeRTOS queues
     CLOSED: [2021-01-24 Sun 05:13]
** DONE use queues for storing historic message
     CLOSED: [2021-01-24 Sun 05:15]

** DONE reply to "Identification (Service 07h 04h)"
    CLOSED: [2021-01-24 Sun 04:28]

** TODO tackle the arbitration challenge
** TODO get ESP board to interface with 2.0" display
item: https://www.aliexpress.com/item/4000830895622.html

driver IC = ST7789VW

Aduino examples here : https://simple-circuit.com/arduino-st7789-ips-tft-display-example/

drivers:
 - https://github.com/adafruit/Adafruit-ST7735-Library
 - https://github.com/adafruit/Adafruit-GFX-Library
