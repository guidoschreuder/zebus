#+TITLE:     EBus
#+AUTHOR:    Guido Schreuder
#+EMAIL:     guido.schreuder@ruimtepuin.be

* Manage the Valliant heater

** Goals
Create system to control the heater

Conceived features:
- room controller:
  - display to represent status
    - requested room temperature
    - room temparature
    - heater flow temp (ebusd message 'FlowTemp', also rounded in `status01`)
    - heater return temp (ebusd message 'ReturnTemp', also rounded in `status01`)
    - outside temperature
    - heater mode: heating/hot water
    - flame on/off (ebusd message 'Flame')
    - pump on/off (ebusd message 'WP')
    - heater modulation
  - sensor for actual room temperature
  - controls to set required temperature
- communicate date and outside temperature to heater unit
- control remotely using a telegram bot, that way we do not need to open any ports to the outside
- display graphs over time of relevant values

** Topology
- room controller (ESP32 + display + temp-sensor)
- outdoor unit, communicates temperature to "master" ESP32 on heater unit over ESP-NOW
- master forwards to MQTT for monitoring/graphing


** Challenges
- EBUS communication protocol
- Valliant's EBUS commands are proprietary


* tasks
** DONE create hardware interface for EBUS
    CLOSED: [2021-01-17 Sun 01:48]
** DONE get hardware interface to work with Ebusd and experiment a bit
    CLOSED: [2021-01-17 Sun 01:48]
** DONE build bus power supply so testing can be done in stand-alone mode
    CLOSED: [2021-01-17 Sun 01:50]
** TODO determine preferred topology to use
consider ESP-NOW so "sensor" modules can profit from reduced "ON" time.

This needs a "master" though to forward to MQTT if required.

Good read and entry point is here: https://hackaday.io/project/174898-esp-now-weather-station
** DONE experiment with programming new ESP32 boards
    CLOSED: [2021-01-18 Mon 03:19]
that was easy as pie :)
** DONE get ESP32 to listen in on EBUS messages and forward them ad-verbum to serial port for monitoring/debugging
    CLOSED: [2021-01-24 Sun 05:14]
** TODO implement queues for actions "to be done" and "messages completed"
status:

implemented a pretty simple queue

later i found out about the provided facilities of FreeRTOS (live and learn...)

the simple mock queue is however still very usefull for unit-testing in native mode

actual implementation will use FreeRTOS queues provided by ESP-IDF/FreeRTOS
** DONE learn how to use FreeRTOS queues
     CLOSED: [2021-01-24 Sun 05:13]
** DONE use queues for storing historic message
     CLOSED: [2021-01-24 Sun 05:15]

** DONE reply to "Identification (Service 07h 04h)"
    CLOSED: [2021-01-24 Sun 04:28]

** TODO tackle the arbitration challenge
** DONE get ESP board to interface with 2.0" display
   CLOSED: [2021-08-29 Sun 19:06]

* random assortment of links
- http://www.pittnerovi.com/jiri/hobby/electronics/ebus/index.html
- https://github.com/slavikb/BaiMon/blob/master/BaiMon.ino
- https://www.14core.com/wiring-and-flashing-programming-esp-32-esp32s-with-usb-ttl-uart/
- https://www.thingforward.io/techblog/2017-08-08-embedded-testing-with-platformio-part-2.html
- set datetime: https://github.com/john30/ebusd/issues/286

* documentation
** display

[[./docs/img/2-Inch-TFT-Color-Screen-LCD-Display-Module.png]]

driver IC: ST7789VW

size: 240x320 px

library used: TFT\under{}eSPI

bought here: https://www.aliexpress.com/item/4000830895622.html


| pinout | meaning          | ESP32   | note       |
|--------+------------------+---------+------------|
| CS     | chip select      | GND     | active low |
| DC     | SPI Data Command | GPIO 27 |            |
| RST    | Reset            | GPIO 4  |            |
| SDA    | SPI MOSI         | GPIO 23 |            |
| SCL    | SPI clock        | GPIO 18 |            |
| VCC    |                  | +3.3    |            |
| GND    |                  | GND     |            |
